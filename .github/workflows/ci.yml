name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # Test Go CLI component
  test-cli:
    name: Test CLI (Go)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.4'
          cache-dependency-path: cli/go.sum

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('cli/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        working-directory: cli
        run: go mod download

      - name: Copy schema.yaml to CLI config
        run: |
          mkdir -p cli/cmd/config
          cp config/schema.yaml cli/cmd/config/

      - name: Build CLI
        working-directory: cli
        run: go build -v ./...

      - name: Run Go tests with coverage
        working-directory: cli
        run: |
          go test ./... -coverpkg=./... -covermode=atomic -coverprofile=coverage.out
          go tool cover -func=coverage.out | tee coverage.txt
          echo "Installing go2lcov..." && go install github.com/k1LoW/go2lcov@latest
          "$(go env GOPATH)"/bin/go2lcov -in coverage.out -out coverage.lcov

      - name: Publish CLI coverage (markdown table from LCOV) to job summary
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const lcov = fs.readFileSync('cli/coverage.lcov','utf8');
            const lines = lcov.split('\n');
            const files = [];
            let current = null;
            for (const raw of lines) {
              const line = raw.trim();
              if (line.startsWith('SF:')) {
                if (current) files.push(current);
                current = { file: line.slice(3), total: 0, covered: 0 };
              } else if (line.startsWith('DA:') && current) {
                const [,ln, hits] = line.match(/^DA:(\d+),(\d+)/) || [];
                if (ln) {
                  current.total += 1;
                  if (parseInt(hits,10) > 0) current.covered += 1;
                }
              } else if (line === 'end_of_record') {
                if (current) { files.push(current); current = null; }
              }
            }
            const percent = (c,t)=> t===0? '0.0%': ((c*100/t).toFixed(1)+'%');
            let md = '## CLI Coverage (LCOV)\n\n';
            md += '| File | Lines | Covered | Coverage |\n|---|---:|---:|---:|\n';
            let totalLines=0, totalCovered=0;
            for (const f of files) {
              totalLines += f.total; totalCovered += f.covered;
              md += `| ${f.file.replace(/^.*?llamafarm\//,'')} | ${f.total} | ${f.covered} | ${percent(f.covered,f.total)} |\n`;
            }
            md += `| total | ${totalLines} | ${totalCovered} | ${percent(totalCovered,totalLines)} |\n`;
            fs.appendFileSync(process.env.GITHUB_STEP_SUMMARY, md);

      - name: Upload CLI coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: cli-coverage
          path: |
            cli/coverage.out
            cli/coverage.txt

      - name: Update PR description with CLI coverage (markdown table from LCOV)
        if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == false
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const lcov = fs.readFileSync('cli/coverage.lcov','utf8');
            const lines = lcov.split('\n');
            const files = [];
            let current = null;
            for (const raw of lines) {
              const line = raw.trim();
              if (line.startsWith('SF:')) {
                if (current) files.push(current);
                current = { file: line.slice(3), total: 0, covered: 0 };
              } else if (line.startsWith('DA:') && current) {
                const [,ln, hits] = line.match(/^DA:(\d+),(\d+)/) || [];
                if (ln) {
                  current.total += 1;
                  if (parseInt(hits,10) > 0) current.covered += 1;
                }
              } else if (line === 'end_of_record') {
                if (current) { files.push(current); current = null; }
              }
            }
            const percent = (c,t)=> t===0? '0.0%': ((c*100/t).toFixed(1)+'%');
            let table = '| File | Lines | Covered | Coverage |\n|---|---:|---:|---:|\n';
            let totalLines=0, totalCovered=0;
            for (const f of files) {
              totalLines += f.total; totalCovered += f.covered;
              table += `| ${f.file.replace(/^.*?llamafarm\//,'')} | ${f.total} | ${f.covered} | ${percent(f.covered,f.total)} |\n`;
            }
            table += `| total | ${totalLines} | ${totalCovered} | ${percent(totalCovered,totalLines)} |\n`;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const pull_number = context.payload.pull_request.number;
            const start = '<!-- CLI_COVERAGE_START -->';
            const end = '<!-- CLI_COVERAGE_END -->';
            const block = `${start}\n\n### CLI Coverage (LCOV)\n\n${table}\n${end}`;

            const { data: pr } = await github.rest.pulls.get({ owner, repo, pull_number });
            let body = pr.body || '';
            if (body.includes(start) && body.includes(end)) {
              const regex = new RegExp(`${start}[\\s\\S]*?${end}`);
              body = body.replace(regex, block);
            } else {
              body = `${body}\n\n${block}`.trim();
            }
            await github.rest.pulls.update({ owner, repo, pull_number, body });

      - name: Skipping PR description update (fork PR)
        if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == true
        run: |
          echo "PR is from a fork; cannot update PR description with GITHUB_TOKEN. Coverage is available in the job summary and as artifacts." >> "$GITHUB_STEP_SUMMARY"

  # Test Python components
  test-python:
    name: Test Python Components
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
        component: ['config', 'rag', 'server', 'runtime']
        exclude:
          # Server and runtime require Python 3.12+
          - component: server
            python-version: '3.11'
          - component: runtime
            python-version: '3.11'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          cache-dependency-glob: "**/uv.lock"

      - name: Check if component has tests
        id: check-tests
        working-directory: ${{ matrix.component }}
        run: |
          if [ -d "tests" ] || [ -f "test_*.py" ] || [ -f "*_test.py" ]; then
            echo "has_tests=true" >> $GITHUB_OUTPUT
          else
            echo "has_tests=false" >> $GITHUB_OUTPUT
          fi

      - name: Install dependencies
        working-directory: ${{ matrix.component }}
        run: |
          if [ -f "uv.lock" ]; then
            uv sync --all-extras
          else
            echo "No uv.lock found, attempting to install from pyproject.toml"
            uv pip install -e .
          fi

      - name: Install test dependencies
        if: steps.check-tests.outputs.has_tests == 'true'
        working-directory: ${{ matrix.component }}
        run: |
          # Install pytest if not already in dependencies
          uv add --dev pytest pytest-cov pytest-asyncio || true

      - name: Run linting
        working-directory: ${{ matrix.component }}
        run: |
          # Run ruff if available in project
          if uv run ruff --version 2>/dev/null; then
            uv run ruff check .
          else
            echo "Ruff not available, skipping linting"
          fi
        continue-on-error: true

      - name: Set up Ollama
        uses: pydantic/ollama-action@v3
        with:
          model: nomic-embed-text

      - name: Run tests
        if: steps.check-tests.outputs.has_tests == 'true'
        working-directory: ${{ matrix.component }}
        run: |
          uv run pytest -v --cov=. --cov-report=term-missing

      - name: Skip tests (no tests found)
        if: steps.check-tests.outputs.has_tests == 'false'
        run: |
          echo "No tests found for ${{ matrix.component }}, skipping test execution"

  # Build verification job
  build-verification:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [test-cli, test-python]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Verify all Python components can be built
        run: |
          for component in config rag server runtime; do
            echo "Building $component..."
            cd $component
            if [ -f "uv.lock" ]; then
              uv sync
            else
              uv pip install -e .
            fi
            cd ..
          done

      - name: Integration test placeholder
        run: |
          echo "All components built successfully!"
          echo "Future: Add integration tests here"