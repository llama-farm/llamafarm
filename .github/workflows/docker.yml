name: Build and Push Docker Images

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        service: [designer, server, runtime]
        include:
          - service: designer
            context: ./designer
            dockerfile: ./designer/Dockerfile
            description: "LlamaFarm Designer - React frontend with nginx"
          - service: server
            context: ./
            dockerfile: ./server/Dockerfile
            description: "LlamaFarm Server - FastAPI backend"
          - service: runtime
            context: ./runtime
            dockerfile: ./runtime/Dockerfile
            description: "LlamaFarm Runtime - Python runtime service"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix=${{ github.ref_name }}-
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=LlamaFarm ${{ matrix.service }}
            org.opencontainers.image.description=${{ matrix.description }}
            org.opencontainers.image.vendor=LlamaFarm

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Build multi-service docker-compose for testing
  test-compose:
    name: Test Docker Compose
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build services with docker compose
        working-directory: deployment/docker_compose
        run: |
          # Update docker compose to use local builds for testing
          docker compose -f docker-compose.yml build

      - name: Test services startup
        working-directory: deployment/docker_compose
        run: |
          # Start services and check they come up healthy
          docker compose -f docker-compose.yml up -d

          # Wait for services to be ready
          sleep 30

          # Check if services are running
          docker compose -f docker-compose.yml ps

          # Basic health checks
          docker compose -f docker-compose.yml logs server
          docker compose -f docker-compose.yml logs designer
          docker compose -f docker-compose.yml logs runtime

      - name: Cleanup
        if: always()
        working-directory: deployment/docker_compose
        run: |
          docker compose -f docker-compose.yml down -v

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'
    strategy:
      matrix:
        service: [designer, server, runtime]
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}:latest
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'