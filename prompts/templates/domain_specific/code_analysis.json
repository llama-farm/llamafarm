{
  "template_id": "code_analysis",
  "name": "Code Analysis",
  "type": "domain_specific",
  "template": "Code to analyze:\n```\n{{ context }}\n```\n\nAnalysis request: {{ query }}\n\nüíª **CODE ANALYSIS REPORT**\n\nüèóÔ∏è **Structure & Organization**\n‚Ä¢ How is the code structured and organized?\n‚Ä¢ Is it readable and well-formatted?\n‚Ä¢ Are naming conventions consistent?\n\n‚öôÔ∏è **Logic & Functionality**\n‚Ä¢ Does the code accomplish its intended purpose?\n‚Ä¢ Is the logic clear and efficient?\n‚Ä¢ Are there any logical errors or edge cases missed?\n\n‚ö†Ô∏è **Potential Issues**\n‚Ä¢ Are there any bugs, security vulnerabilities, or performance problems?\n‚Ä¢ What improvements could be made?\n‚Ä¢ Are there any code smells or anti-patterns?\n\nüìã **Recommendations**\n‚Ä¢ What specific changes would improve this code?\n‚Ä¢ Are there better approaches or design patterns to consider?\n‚Ä¢ What would make this code more maintainable?\n\nüìä **Overall Assessment**\nSummary of the code quality and key takeaways:\n\n**Final Rating:** [Rate the code quality and provide reasoning]",
  "input_variables": ["context", "query"],
  "optional_variables": [],
  "metadata": {
    "use_case": "code_review",
    "complexity": "medium",
    "domain": "software",
    "description": "Code analysis and review template",
    "tags": ["code", "programming", "review", "analysis"],
    "author": "LlamaFarm Team",
    "examples": [
      {
        "description": "Python function review",
        "input": {
          "query": "Review this function for potential improvements",
          "context": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"
        },
        "expected_output": "## Code Analysis:\n\n**Structure & Organization:**\nThe function is clearly structured with a simple recursive approach...\n\n**Potential Issues:**\nThis recursive implementation has exponential time complexity..."
      }
    ]
  },
  "validation_rules": {
    "query": {
      "type": "str",
      "min_length": 5,
      "max_length": 1000,
      "required": true
    },
    "context": {
      "type": "str",
      "required": true
    }
  }
}