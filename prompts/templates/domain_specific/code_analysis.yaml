template_id: code_analysis
name: Code Analysis
type: domain_specific
template: 'Code to analyze:

  ```

  {{ context }}

  ```


  Analysis request: {{ query }}


  💻 **CODE ANALYSIS REPORT**


  🏗️ **Structure & Organization**

  • How is the code structured and organized?

  • Is it readable and well-formatted?

  • Are naming conventions consistent?


  ⚙️ **Logic & Functionality**

  • Does the code accomplish its intended purpose?

  • Is the logic clear and efficient?

  • Are there any logical errors or edge cases missed?


  ⚠️ **Potential Issues**

  • Are there any bugs, security vulnerabilities, or performance problems?

  • What improvements could be made?

  • Are there any code smells or anti-patterns?


  📋 **Recommendations**

  • What specific changes would improve this code?

  • Are there better approaches or design patterns to consider?

  • What would make this code more maintainable?


  📊 **Overall Assessment**

  Summary of the code quality and key takeaways:


  **Final Rating:** [Rate the code quality and provide reasoning]'
input_variables:
- context
- query
optional_variables: []
metadata:
  use_case: code_review
  complexity: medium
  domain: software
  description: Code analysis and review template
  tags:
  - code
  - programming
  - review
  - analysis
  author: LlamaFarm Team
  examples:
  - description: Python function review
    input:
      query: Review this function for potential improvements
      context: "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1)\
        \ + fibonacci(n-2)"
    expected_output: '## Code Analysis:


      **Structure & Organization:**

      The function is clearly structured with a simple recursive approach...


      **Potential Issues:**

      This recursive implementation has exponential time complexity...'
validation_rules:
  query:
    type: str
    min_length: 5
    max_length: 1000
    required: true
  context:
    type: str
    required: true
