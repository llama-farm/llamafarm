# Hybrid Cloud-Local Strategy
# Intelligent routing between cloud APIs and local models for optimal cost, performance, and privacy
version: "v1"

# Strategy metadata
strategy_info:
  name: "hybrid_cloud_local"
  description: "Smart hybrid approach balancing cloud capabilities with local privacy and cost control"
  use_case: "Production applications, growing startups, privacy-conscious enterprises"
  difficulty: "intermediate"
  deployment_type: "hybrid"
  cost_optimization: "intelligent"
  fallback_strategy: "cloud_primary → local_fallback → hybrid_balanced"
  
# Environment-specific configurations for hybrid deployment
environments:
  
  # Cloud-Primary with Local Fallback
  cloud_primary:
    active: true
    model:
      base_model: "gpt-4o-mini"
      model_type: "OpenAIModel"
      api_key: "${OPENAI_API_KEY}"
      fallback_models: ["llama3.1:8b", "phi3:medium"]
      cost_per_1k_input: 0.15
      cost_per_1k_output: 0.60
      
    training:
      method: "api_calls"
      max_tokens: 2000
      temperature: 0.7
      daily_budget: 20.0
      privacy_routing: true
      local_fallback_enabled: true
      
    generation:
      temperature: 0.7
      max_tokens: 2000
      top_p: 0.9
      stream: true
      timeout: 30
      
  # Local-Primary with Cloud Enhancement
  local_primary:
    active: false
    model:
      base_model: "llama3.1:8b"
      model_type: "Ollama"
      device: "auto"
      ollama_model: "llama3.1:8b"
      download_if_missing: true
      torch_dtype: "float16"
      cloud_enhancement: true
      
    training:
      method: "lora"
      batch_size: 2
      gradient_accumulation_steps: 4
      max_steps: 300
      learning_rate: 3e-4
      warmup_steps: 30
      logging_steps: 10
      eval_steps: 50
      save_steps: 50
      
    lora_config:
      r: 16
      alpha: 32
      dropout: 0.1
      target_modules: ["q_proj", "k_proj", "v_proj", "o_proj"]
      bias: "none"
      task_type: "CAUSAL_LM"
      
    generation:
      temperature: 0.7
      top_p: 0.9
      max_length: 1024
      do_sample: true
      
  # Balanced Hybrid Approach
  hybrid_balanced:
    active: false
    model:
      base_model: "hybrid"
      model_type: "HybridRouter"
      local_model: "phi3:mini"
      cloud_model: "gpt-4o-mini"
      routing_strategy: "intelligent"
      
    training:
      method: "hybrid_inference"
      privacy_routing: true
      cost_aware_routing: true
      performance_routing: true
      
    generation:
      temperature: 0.7
      max_tokens: 1500
      top_p: 0.9
      routing_rules:
        privacy_sensitive: "local"
        cost_sensitive: "local_first"
        quality_critical: "cloud_first"
        speed_critical: "parallel"

# Dataset configuration for hybrid training
dataset:
  path: "datasets/hybrid_data.jsonl"
  format: "jsonl"
  text_column: "output"
  prompt_template: |
    ### Query:
    {instruction}
    
    ### Response:
    {output}
  max_length: 1500
  validation_split: 0.15
  privacy_classification: true

# Hybrid evaluation metrics
evaluation:
  metrics:
    - "cost_efficiency"
    - "response_time"
    - "privacy_compliance"
    - "quality_score"
    - "availability"
  eval_dataset: "validation"
  custom_metrics:
    cost_efficiency:
      target_cost_reduction: 0.4     # 40% cost reduction vs cloud-only
      budget_compliance: true
    privacy_compliance:
      pii_local_routing: true
      sensitive_data_protection: true
  
# Output configuration for hybrid models
output:
  model_name: "hybrid-cloud-local"
  save_directory: "./models/hybrid"
  push_to_hub: false
  export_formats: ["pytorch", "config"]
  routing_config_export: true
  
# Safety and privacy for hybrid deployment
safety:
  content_filter: true
  privacy_classification: true
  pii_detection: true
  sensitive_data_local_routing: true
  cost_monitoring: true
  
# Hardware requirements for hybrid deployment
hardware_requirements:
  cloud_primary:
    min_memory: "4GB"
    recommended_memory: "8GB"
    disk_space: "10GB"
    network: "Reliable internet connection"
    estimated_cost: "$10-30/day"
    notes: "Minimal local requirements with cloud dependency"
    
  local_primary:
    min_memory: "16GB"
    recommended_memory: "32GB"
    disk_space: "50GB"
    gpu_memory: "8GB"
    estimated_time: "20-30 minutes"
    notes: "Substantial local resources with cloud enhancement"
    
  hybrid_balanced:
    min_memory: "12GB"
    recommended_memory: "24GB"
    disk_space: "30GB"
    network: "High-speed internet"
    estimated_cost: "$5-15/day"
    notes: "Balanced approach optimizing cost and performance"

# Environment auto-detection for hybrid deployment
auto_environment:
  enabled: true
  detection_order:
    - "hybrid_balanced"
    - "local_primary"
    - "cloud_primary"
    
  selection_criteria:
    hybrid_balanced:
      - "os.getenv('OPENAI_API_KEY') is not None"
      - "torch.backends.mps.is_available() or torch.cuda.is_available()"
      - "psutil.virtual_memory().total > 12 * 1024**3"
    local_primary:
      - "torch.backends.mps.is_available() or torch.cuda.is_available()"
      - "psutil.virtual_memory().total > 16 * 1024**3"
    cloud_primary:
      - "os.getenv('OPENAI_API_KEY') is not None"

# Intelligent routing configuration
intelligent_routing:
  privacy_rules:
    pii_detected: "local_only"
    confidential_tag: "local_preferred"
    public_data: "cloud_preferred"
    
  cost_rules:
    high_volume: "local_first"
    budget_exceeded: "local_only"
    simple_queries: "local_preferred"
    
  performance_rules:
    speed_critical: "parallel_inference"
    quality_critical: "cloud_first"
    complex_reasoning: "cloud_preferred"
    
  availability_rules:
    cloud_down: "local_fallback"
    local_overloaded: "cloud_fallback"
    
# Cost management for hybrid approach
cost_management:
  daily_budget: 20.0
  monthly_budget: 400.0
  per_query_limit: 0.05
  
  optimization_strategies:
    cache_responses: true
    batch_processing: true
    prompt_compression: true
    smart_model_selection: true
    
  alerts:
    daily_50_percent: true
    daily_80_percent: true
    monthly_90_percent: true
    
# Privacy classification system
privacy_classifier:
  pii_detection:
    enabled: true
    patterns:
      - "social_security_numbers"
      - "credit_card_numbers"
      - "email_addresses"
      - "phone_numbers"
      - "medical_records"
      - "financial_data"
      
  sensitivity_levels:
    public: "cloud_preferred"
    internal: "cloud_budget_aware"
    confidential: "local_preferred"
    restricted: "local_only"

# LlamaFactory integration for hybrid fine-tuning
llamafactory:
  model_name: microsoft/phi-3-mini-4k-instruct
  template: phi
  
  # method
  stage: sft
  do_train: true
  finetuning_type: lora
  lora_target: all
  lora_rank: 16
  lora_alpha: 32
  
  # dataset
  dataset_dir: ../datasets/hybrid
  dataset: cloud_local_balance
  cutoff_len: 1500
  max_samples: 500
  overwrite_cache: true
  preprocessing_num_workers: 4
  
  # output
  output_dir: ./hybrid_output
  logging_steps: 10
  save_steps: 50
  plot_loss: true
  overwrite_output_dir: true
  
  # train
  per_device_train_batch_size: 2
  gradient_accumulation_steps: 4
  learning_rate: 3.0e-4
  num_train_epochs: 3.0
  lr_scheduler_type: cosine
  warmup_steps: 30
  bf16: true
  
  # eval
  val_size: 0.15
  per_device_eval_batch_size: 1
  eval_strategy: steps
  eval_steps: 50

# Performance optimization for hybrid deployment
performance_optimization:
  parallel_inference: true
  model_warming: true
  connection_pooling: true
  streaming_responses: true
  
  response_time_targets:
    interactive: "< 2 seconds"
    batch: "< 30 seconds"
    background: "< 5 minutes"
    
# Monitoring and analytics
monitoring:
  track_metrics:
    - "response_times"
    - "cost_per_query"
    - "model_accuracy"
    - "privacy_compliance"
    - "routing_decisions"
    
  alerts:
    high_error_rate: true
    cost_budget_exceeded: true
    privacy_violations: true
    performance_degradation: true
    
# Use case examples for hybrid deployment
hybrid_applications:
  customer_support:
    routing: "Public queries → Cloud, Customer data → Local"
    estimated_cost: "$100-300/month"
    
  content_generation:
    routing: "Simple content → Local, Complex campaigns → Cloud"
    estimated_cost: "$50-150/month"
    
  code_assistant:
    routing: "General coding → Cloud, Proprietary code → Local"
    estimated_cost: "$75-200/month"
    
  document_analysis:
    routing: "Public docs → Cloud, Confidential docs → Local"
    estimated_cost: "$150-400/month"
    
# Success metrics for hybrid strategy
success_metrics:
  cost_reduction: "30-60% vs cloud-only"
  privacy_compliance: "100% for sensitive data"
  response_time: "< 3 seconds average"
  availability: "> 99.5% uptime"
  user_satisfaction: "> 4.5/5.0"