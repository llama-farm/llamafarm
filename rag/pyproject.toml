[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "llama-rag"
version = "0.1.0"
description = "ðŸ¦™ Extensible RAG system with llama-powered CLI experience"
readme = "README.md"
license = { text = "MIT" }
authors = [
    { name = "RAG Team", email = "rag@llamafarm.dev" }
]
maintainers = [
    { name = "RAG Team", email = "rag@llamafarm.dev" }
]
keywords = [
    "rag",
    "retrieval-augmented-generation", 
    "llama",
    "ollama",
    "chromadb",
    "embeddings",
    "vector-database",
    "nlp",
    "ai",
    "machine-learning"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10", 
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: Linguistic",
]
requires-python = ">=3.9"
dependencies = [
    "chromadb>=1.0.0",
    "requests>=2.31.0",
    "tqdm>=4.65.0",
    "colorama>=0.4.6",
    "pypdf2>=3.0.0",
    "reportlab>=4.4.3",
    "pyyaml>=6.0.2",
    "rich>=14.1.0",
    # Excel parsing dependencies
    "pandas>=2.0.0",
    "openpyxl>=3.1.2",
    "xlrd>=2.0.1",
    # HTML parsing dependencies
    "beautifulsoup4>=4.12.0",
    "lxml>=4.9.0",
    # Document parsing dependencies
    "python-docx>=1.0.0",
    # Character encoding detection
    "chardet>=5.0.0",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]

# Testing dependencies  
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.10.0",
    "responses>=0.23.0",
    "requests-mock>=1.10.0",
]

# Documentation dependencies
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocs-mermaid2-plugin>=1.0.0",
    "mkdocstrings[python]>=0.22.0",
]

# Performance monitoring
monitoring = [
    "prometheus-client>=0.17.0",
    "psutil>=5.9.0",
    "memory-profiler>=0.61.0",
]

# Additional vector databases
vector-dbs = [
    "qdrant-client>=1.6.0",
    "weaviate-client>=3.24.0",
    "pymilvus>=2.3.0",
    "pinecone-client>=2.2.0",
    "lancedb>=0.3.0",
    "faiss-cpu>=1.7.4",
]

# Additional embedding providers
embeddings = [
    "sentence-transformers>=2.2.0",
    "openai>=1.0.0",
    "cohere>=4.32.0",
    "transformers>=4.35.0",
    "torch>=2.0.0",
]

# All optional dependencies
all = [
    "llama-rag[dev,test,docs,monitoring,vector-dbs,embeddings]"
]

[project.urls]
Homepage = "https://github.com/llama-farm/llamafarm"
Repository = "https://github.com/llama-farm/llamafarm.git"
Issues = "https://github.com/llama-farm/llamafarm/issues"
Documentation = "https://github.com/llama-farm/llamafarm/blob/main/README.md"

[project.scripts]
llama-rag = "cli:main"
rag = "cli:main"

[tool.hatch.build.targets.wheel]
packages = [
    "core",
    "parsers", 
    "embedders",
    "stores",
    "utils"
]

# Include data files
[tool.hatch.build.targets.wheel.force-include]
"README.md" = "llama_rag/README.md"

[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312', 'py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | rag_env
  | _build
  | buck-out
  | build
  | dist
  | chroma_db
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["core", "parsers", "embedders", "stores", "utils"]
skip_glob = [
    "rag_env/*",
    "venv/*", 
    ".venv/*",
    "build/*",
    "dist/*",
    "chroma_db/*"
]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "chromadb.*",
    "tqdm.*",
    "colorama.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=core",
    "--cov=parsers", 
    "--cov=embedders",
    "--cov=stores",
    "--cov=utils",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = [
    "tests",
    "."
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "ollama: marks tests that require Ollama to be running",
    "chromadb: marks tests that require ChromaDB",
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["core", "parsers", "embedders", "stores", "utils"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/rag_env/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.flake8]
max-line-length = 88
extend-ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long (handled by black)
    "W503",  # line break before binary operator (handled by black)
]
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "venv", 
    "rag_env",
    "build",
    "dist",
    "chroma_db",
    "*.egg-info",
]
per-file-ignores = [
    "__init__.py:F401",  # imported but unused
    "test_*.py:D100,D101,D102,D103,D104",  # missing docstrings in tests
]

# UV-specific configuration
[tool.uv]
dev-dependencies = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0", 
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.10.0",
    "responses>=0.23.0",
    "requests-mock>=1.10.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]

[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "rag_env",
    "chroma_db",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"test_*.py" = ["D100", "D101", "D102", "D103", "D104"]

[tool.ruff.mccabe]
max-complexity = 10
