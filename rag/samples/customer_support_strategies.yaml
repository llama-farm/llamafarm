# Customer Support RAG Strategies
# Multi-channel support system configuration
# Covers: Tickets, knowledge base, chat logs, product docs, customer feedback

# ============================================================================
# SUPPORT TICKET STRATEGY
# ============================================================================
support_ticket_management:
  description: "Process and search customer support tickets for pattern recognition and resolution"
  use_cases:
    - "Similar issue identification"
    - "Resolution recommendation"
    - "Escalation prediction"
    - "SLA monitoring"
  
  components:
    parser:
      type: "CSVParser"                # Most ticketing systems export CSV
      config:
        delimiter: ","
        has_header: true
        field_mapping:
          content_field: "description"
          id_field: "ticket_id"
          metadata_fields:
            - "customer_id"
            - "product"
            - "category"
            - "priority"              # P1, P2, P3, P4
            - "status"                # Open, In Progress, Resolved
            - "created_date"
            - "resolved_date"
            - "agent_id"
            - "satisfaction_score"    # CSAT
            - "channel"               # Email, chat, phone
        combine_fields: true          # Combine subject + description
    
    extractors:
      # Customer sentiment analysis
      - type: "SentimentExtractor"
        config:
          granularity: "document"     # Overall ticket sentiment
          categories:
            - "angry"                 # Escalation risk
            - "frustrated"
            - "neutral"
            - "satisfied"
          emotion_detection: true      # Detect specific emotions
          urgency_detection: true      # Detect urgent language
      
      # Problem categorization
      - type: "IssueClassificationExtractor"
        config:
          categories:
            - "billing"
            - "technical"
            - "account"
            - "feature_request"
            - "bug_report"
            - "complaint"
          multi_label: true           # Tickets can have multiple issues
          confidence_threshold: 0.7
      
      # Entity extraction for context
      - type: "EntityExtractor"
        config:
          entities: ["PERSON", "ORG", "PRODUCT", "DATE", "MONEY"]
          custom_entities:
            - "ERROR_CODE"            # System error codes
            - "ACCOUNT_TYPE"          # Free, Pro, Enterprise
            - "FEATURE_NAME"          # Product features
      
      # Pattern extraction for common issues
      - type: "PatternExtractor"
        config:
          patterns:
            error_code: "ERR-\\d{4,6}"
            order_number: "ORD-\\d{10}"
            case_number: "CASE-\\d{8}"
            email: "\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b"
            phone: "\\+?1?\\d{10,14}"
          include_context: true
          context_window: 50
    
    embedder:
      type: "OllamaEmbedder"
      config:
        model: "nomic-embed-text"
        dimension: 768
        batch_size: 64               # Tickets are typically short
        normalize: true
    
    vector_store:
      type: "ChromaStore"
      config:
        collection_name: "support_tickets"
        persist_directory: "./vectordb/support/tickets"
        metadata_config:
          indexed_fields: ["priority", "category", "status", "product"]
          filterable_fields: ["created_date", "customer_id", "agent_id"]
    
    retrieval_strategy:
      type: "RerankedStrategy"
      config:
        initial_k: 30
        final_k: 5
        rerank_factors:
          recency_weight: 0.2         # Recent issues more relevant
          relevance_weight: 0.5
          metadata_boost:
            priority:
              "P1": 2.0               # Critical issues
              "P2": 1.5               # High priority
              "P3": 1.0               # Normal
              "P4": 0.8               # Low
            status:
              "Resolved": 1.3         # Prefer resolved tickets
              "In Progress": 0.9
              "Open": 0.8

# ============================================================================
# KNOWLEDGE BASE STRATEGY
# ============================================================================
support_knowledge_base:
  description: "Internal and external knowledge base articles, FAQs, and documentation"
  use_cases:
    - "Self-service support"
    - "Agent assistance"
    - "Automated responses"
    - "Training material"
  
  components:
    parser:
      type: "MarkdownParser"          # KB articles often in Markdown
      config:
        preserve_formatting: true
        extract_code_blocks: true     # For technical instructions
        extract_links: true           # Related articles
        extract_images: true          # Screenshots, diagrams
        chunk_by_section: true        # Chunk by article sections
        min_section_size: 200
        max_section_size: 1000
    
    extractors:
      # Article structure extraction
      - type: "HeadingExtractor"
        config:
          levels: [1, 2, 3]
          include_content: true
          max_content_length: 300
          preserve_hierarchy: true     # Maintain article structure
      
      # Solution steps extraction
      - type: "StepsExtractor"         # Custom extractor for procedures
        config:
          identify_numbered_lists: true
          identify_bullet_lists: true
          extract_prerequisites: true
          extract_warnings: true       # Important notices
          max_steps: 20
      
      # Metadata for article management
      - type: "ArticleMetadataExtractor"
        config:
          extract_fields:
            - "article_id"
            - "last_updated"
            - "author"
            - "category"
            - "tags"
            - "view_count"
            - "helpful_count"
            - "target_audience"        # End-user, agent, developer
      
      # Link extraction for related content
      - type: "LinkExtractor"
        config:
          extract_internal: true       # Links to other KB articles
          extract_external: true       # External resources
          categorize: true
          validate_urls: false         # Don't validate in bulk processing
    
    embedder:
      type: "OllamaEmbedder"
      config:
        model: "nomic-embed-text"
        dimension: 768
        batch_size: 32
    
    vector_store:
      type: "ChromaStore"
      config:
        collection_name: "knowledge_base"
        persist_directory: "./vectordb/support/kb"
        metadata_config:
          indexed_fields: ["category", "tags", "target_audience"]
    
    retrieval_strategy:
      type: "HybridUniversalStrategy"
      config:
        strategies:
          # Semantic search for concepts
          - type: "BasicSimilarityStrategy"
            weight: 0.7
            config:
              top_k: 15
          # Keyword matching for specific terms
          - type: "KeywordStrategy"     # BM25-style keyword matching
            weight: 0.3
            config:
              top_k: 15
        fusion_method: "rrf"
        final_k: 5

# ============================================================================
# LIVE CHAT STRATEGY
# ============================================================================
live_chat_conversations:
  description: "Real-time chat transcripts and conversation analysis"
  use_cases:
    - "Chat bot training"
    - "Agent performance analysis"
    - "Common question identification"
    - "Escalation patterns"
  
  components:
    parser:
      type: "ConversationParser"      # Specialized for chat format
      config:
        formats: ["json", "xml", "text"]
        preserve_speakers: true       # Keep agent/customer labels
        preserve_timestamps: true
        chunk_by_turn: false          # Keep conversation context
        chunk_size: 1024              # Larger to maintain context
        chunk_overlap: 200
        combine_short_messages: true   # Combine rapid-fire messages
    
    extractors:
      # Conversation flow analysis
      - type: "ConversationFlowExtractor"
        config:
          identify_intents: true       # Customer intents
          identify_topics: true        # Topic changes
          identify_resolutions: true   # Problem resolution
          turn_taking_analysis: true   # Response patterns
          extract_duration: true       # Chat duration
      
      # Agent performance metrics
      - type: "AgentMetricsExtractor"
        config:
          metrics:
            - "response_time"         # Time to respond
            - "message_count"         # Number of messages
            - "resolution_time"       # Time to resolve
            - "transfer_occurred"     # Was transfer needed
            - "canned_response_usage" # Template usage
      
      # Customer satisfaction signals
      - type: "SatisfactionSignalExtractor"
        config:
          positive_signals:
            - "thank you"
            - "perfect"
            - "great"
            - "solved"
          negative_signals:
            - "frustrated"
            - "angry"
            - "terrible"
            - "worst"
          extract_feedback: true       # End-of-chat feedback
    
    embedder:
      type: "ConversationalEmbedder"  # Optimized for dialogue
      config:
        model: "sentence-transformers/all-mpnet-base-v2"
        dimension: 768
        batch_size: 24
        context_window: 512           # Include conversation context
    
    vector_store:
      type: "ChromaStore"
      config:
        collection_name: "chat_conversations"
        persist_directory: "./vectordb/support/chats"
        metadata_config:
          indexed_fields: ["agent_id", "date", "resolution_status"]
    
    retrieval_strategy:
      type: "ConversationStrategy"    # Custom strategy for conversations
      config:
        top_k: 10
        similarity_metric: "cosine"
        context_preservation: true     # Keep full conversations
        filter_by_outcome: true        # Filter by resolution status

# ============================================================================
# PRODUCT DOCUMENTATION STRATEGY
# ============================================================================
product_documentation:
  description: "Technical documentation, API docs, user guides, and release notes"
  use_cases:
    - "Technical reference"
    - "Integration support"
    - "Feature documentation"
    - "Troubleshooting guides"
  
  components:
    parser:
      type: "TechnicalDocParser"      # Handles multiple tech doc formats
      config:
        formats: ["markdown", "rst", "html"]
        extract_code_blocks: true
        syntax_highlighting: true      # Preserve code language
        extract_api_definitions: true  # OpenAPI/Swagger
        chunk_size: 768
        chunk_overlap: 150
    
    extractors:
      # Code and API extraction
      - type: "CodeExtractor"
        config:
          languages: ["python", "javascript", "java", "curl"]
          extract_functions: true
          extract_classes: true
          extract_examples: true
          include_comments: true
      
      # API endpoint extraction
      - type: "APIExtractor"
        config:
          extract_endpoints: true
          extract_parameters: true
          extract_responses: true
          extract_auth_requirements: true
          formats: ["rest", "graphql", "soap"]
      
      # Version and compatibility info
      - type: "VersionExtractor"
        config:
          extract_version: true
          extract_deprecations: true
          extract_breaking_changes: true
          extract_compatibility: true   # OS, browser, dependencies
      
      # Documentation structure
      - type: "DocStructureExtractor"
        config:
          extract_toc: true            # Table of contents
          extract_prerequisites: true
          extract_see_also: true       # Related topics
          extract_examples: true
    
    embedder:
      type: "CodeAwareEmbedder"       # Understands code context
      config:
        model: "microsoft/codebert-base"
        dimension: 768
        batch_size: 16
        max_length: 512
    
    vector_store:
      type: "ChromaStore"
      config:
        collection_name: "product_docs"
        persist_directory: "./vectordb/support/docs"
        metadata_config:
          indexed_fields: ["version", "product", "doc_type"]
    
    retrieval_strategy:
      type: "VersionAwareStrategy"    # Consider version compatibility
      config:
        top_k: 5
        version_matching: true         # Match user's product version
        include_deprecated: false      # Exclude deprecated content
        fallback_to_latest: true       # Use latest if version not found

# ============================================================================
# CUSTOMER FEEDBACK STRATEGY
# ============================================================================
customer_feedback_analysis:
  description: "Analyze customer feedback, reviews, surveys, and social media mentions"
  use_cases:
    - "Sentiment tracking"
    - "Feature request aggregation"
    - "Churn prediction"
    - "Product improvement insights"
  
  components:
    parser:
      type: "MultiSourceParser"       # Handle various feedback sources
      config:
        sources:
          - "surveys"                 # NPS, CSAT surveys
          - "reviews"                 # App store, product reviews
          - "social_media"            # Twitter, Facebook mentions
          - "emails"                  # Feedback emails
        normalize_format: true         # Standardize different formats
        chunk_size: 512
    
    extractors:
      # Sentiment and emotion analysis
      - type: "AdvancedSentimentExtractor"
        config:
          granularity: "aspect"        # Aspect-based sentiment
          aspects:
            - "product_quality"
            - "customer_service"
            - "pricing"
            - "usability"
            - "performance"
          emotion_categories:
            - "joy"
            - "trust"
            - "fear"
            - "surprise"
            - "sadness"
            - "disgust"
            - "anger"
          intensity_scoring: true      # Sentiment intensity
      
      # Feature request extraction
      - type: "FeatureRequestExtractor"
        config:
          identify_requests: true
          identify_pain_points: true
          identify_suggestions: true
          categorize_by_component: true
          extract_use_cases: true
      
      # Customer segment identification
      - type: "CustomerSegmentExtractor"
        config:
          segments:
            - "enterprise"
            - "small_business"
            - "individual"
            - "developer"
          identify_industry: true
          identify_use_frequency: true
          identify_tenure: true        # How long they've been a customer
      
      # Churn risk indicators
      - type: "ChurnRiskExtractor"
        config:
          risk_indicators:
            - "cancellation_mention"
            - "competitor_mention"
            - "frustration_level"
            - "support_frequency"
          calculate_risk_score: true
          threshold_alerts: true
    
    embedder:
      type: "SentimentAwareEmbedder"
      config:
        model: "cardiffnlp/twitter-roberta-base-sentiment"
        dimension: 768
        batch_size: 32
        preserve_sentiment: true       # Include sentiment in embedding
    
    vector_store:
      type: "ChromaStore"
      config:
        collection_name: "customer_feedback"
        persist_directory: "./vectordb/support/feedback"
        metadata_config:
          indexed_fields: ["source", "date", "sentiment", "customer_segment"]
    
    retrieval_strategy:
      type: "TrendAnalysisStrategy"   # Custom strategy for trend detection
      config:
        top_k: 20
        time_windows:
          - "daily"
          - "weekly"
          - "monthly"
        aggregate_sentiments: true
        identify_emerging_issues: true
        cluster_similar_feedback: true