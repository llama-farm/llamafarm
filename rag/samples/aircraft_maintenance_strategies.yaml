# Aircraft Maintenance RAG Strategies
# Comprehensive configuration for aviation maintenance documentation and operations
# Covers: Technical manuals, maintenance logs, pilot reports, regulatory compliance

# ============================================================================
# TECHNICAL MANUALS STRATEGY
# ============================================================================
aircraft_technical_manuals:
  description: "Process and search aircraft technical manuals, service bulletins, and engineering documents"
  use_cases:
    - "Finding specific maintenance procedures"
    - "Cross-referencing part numbers and specifications"
    - "Troubleshooting guidance"
    - "Compliance verification"
  
  components:
    parser:
      type: "PDFParser"
      config:
        # Technical manuals are often large PDFs with complex formatting
        extract_images: true          # Diagrams and schematics are critical
        extract_tables: true          # Parts lists, specifications
        extract_metadata: true        # Document revision, effectivity
        ocr_enabled: true            # Some older manuals are scanned
        chunk_size: 1024             # Larger chunks to maintain procedure context
        chunk_overlap: 200           # Significant overlap for cross-references
    
    extractors:
      # Extract part numbers with specific aviation patterns
      - type: "PatternExtractor"
        config:
          patterns:
            part_number: "[A-Z]{2,3}-\\d{4,6}-\\d{2,4}"  # Boeing/Airbus part format
            ata_chapter: "ATA \\d{2}(-\\d{2}){0,2}"      # ATA chapter references
            effectivity: "MSN \\d{4,6}(-\\d{4,6})?"       # Aircraft serial numbers
            ad_number: "AD \\d{4}-\\d{2}-\\d{2}"          # Airworthiness Directives
            sb_number: "SB-\\d{2,4}-\\d{2,4}"            # Service Bulletin numbers
          include_context: true
          context_window: 100
      
      # Extract maintenance task metadata
      - type: "HeadingExtractor"
        config:
          levels: [1, 2, 3]          # Chapter, section, subsection
          include_content: true       # Include procedure steps
          max_content_length: 500     # Longer for detailed procedures
          preserve_hierarchy: true     # Maintain manual structure
      
      # Extract critical entities
      - type: "EntityExtractor"
        config:
          entities: ["ORG", "PRODUCT", "DATE"]
          custom_entities:
            - "AIRCRAFT_MODEL"        # B737, A320, etc.
            - "ENGINE_TYPE"           # CFM56, V2500, etc.
            - "COMPONENT"             # Specific aircraft components
      
      # Extract tables for parts and specifications
      - type: "TableExtractor"
        config:
          min_rows: 2
          extract_headers: true
          format: "json"              # Structured format for parts data
    
    embedder:
      type: "OllamaEmbedder"
      config:
        model: "nomic-embed-text"
        dimension: 768
        batch_size: 16               # Smaller batches for large technical docs
        normalize: true
    
    vector_store:
      type: "ChromaStore"
      config:
        collection_name: "aircraft_tech_manuals"
        persist_directory: "./vectordb/aviation/manuals"
        distance_metric: "cosine"
        metadata_config:
          indexed_fields: ["ata_chapter", "effectivity", "document_type"]
    
    retrieval_strategy:
      type: "RerankedStrategy"
      config:
        initial_k: 30                # Cast wide net for technical queries
        final_k: 5
        rerank_factors:
          # Prioritize current revisions
          recency_weight: 0.3         # Latest manual revisions are critical
          relevance_weight: 0.5       # Semantic match to query
          metadata_boost:
            document_type:
              "AMM": 1.5              # Aircraft Maintenance Manual priority
              "TSM": 1.3              # Troubleshooting Manual
              "SRM": 1.2              # Structural Repair Manual
              "IPC": 1.0              # Illustrated Parts Catalog

# ============================================================================
# MAINTENANCE LOGS STRATEGY
# ============================================================================
aircraft_maintenance_logs:
  description: "Process maintenance action forms, work orders, and logbook entries"
  use_cases:
    - "Tracking recurring issues"
    - "Compliance history"
    - "Component reliability analysis"
    - "Maintenance trend identification"
  
  components:
    parser:
      type: "CSVParser"              # Many logs exported from AMOS/TRAX as CSV
      config:
        delimiter: ","
        has_header: true
        field_mapping:
          content_field: "defect_description"
          id_field: "work_order_number"
          metadata_fields:
            - "aircraft_registration"
            - "ata_chapter"
            - "flight_hours"
            - "cycles"
            - "station"
            - "technician_id"
            - "completion_date"
            - "mel_reference"        # Minimum Equipment List
    
    extractors:
      # Extract maintenance patterns
      - type: "PatternExtractor"
        config:
          patterns:
            mel_item: "\\d{2}-\\d{2}-\\d{1}[A-D]"  # MEL item format
            task_card: "MPD-\\d{5}"                 # Maintenance Planning Document
            inspection: "[A-Z]-CHECK|\\d{1,3}[HM]H" # A-Check, 100FH, etc.
      
      # Statistical analysis of maintenance data
      - type: "ContentStatisticsExtractor"
        config:
          calculate_frequency: true   # Frequency of issues
          extract_numbers: true        # Hours, cycles, costs
          identify_trends: true        # Recurring problems
      
      # Summarize maintenance actions
      - type: "SummaryExtractor"
        config:
          max_sentences: 2            # Brief action summary
          include_keywords: true       # Key components/issues
    
    embedder:
      type: "OllamaEmbedder"
      config:
        model: "nomic-embed-text"
        dimension: 768
        batch_size: 64               # Logs are shorter, batch more
    
    vector_store:
      type: "ChromaStore"
      config:
        collection_name: "maintenance_logs"
        persist_directory: "./vectordb/aviation/logs"
        metadata_config:
          indexed_fields: ["aircraft_registration", "ata_chapter", "completion_date"]
          filterable_fields: ["mel_reference", "station"]
    
    retrieval_strategy:
      type: "MetadataFilteredStrategy"
      config:
        top_k: 20
        filters:                      # Common maintenance queries filter by aircraft/date
          date_range_enabled: true
          aircraft_filter_enabled: true
        filter_mode: "pre"            # Filter before retrieval for efficiency

# ============================================================================
# PILOT REPORTS STRATEGY  
# ============================================================================
pilot_debrief_reports:
  description: "Process pilot reports, squawks, and debrief notes"
  use_cases:
    - "Identifying operational issues"
    - "Correlating pilot reports with maintenance findings"
    - "Safety trend analysis"
    - "MEL item justification"
  
  components:
    parser:
      type: "TextParser"
      config:
        encoding: "utf-8"
        chunk_size: 512               # Pilot reports are usually concise
        chunk_overlap: 50
        preserve_formatting: true      # Maintain report structure
    
    extractors:
      # Sentiment is important for pilot reports
      - type: "SentimentExtractor"    # Custom extractor for safety concerns
        config:
          granularity: "sentence"
          categories: ["safety_critical", "operational", "comfort"]
          keywords:
            safety_critical: ["emergency", "failure", "unsafe", "abort"]
            operational: ["delay", "irregular", "abnormal", "caution"]
      
      # Extract flight and system information
      - type: "EntityExtractor"
        config:
          entities: ["DATE", "TIME", "LOC", "ORG"]
          custom_entities:
            - "FLIGHT_PHASE"          # Takeoff, cruise, landing
            - "SYSTEM"                # Hydraulic, electrical, etc.
            - "WEATHER"               # Weather conditions
      
      # Keywords for quick categorization
      - type: "KeywordExtractor"
        config:
          max_keywords: 15
          algorithm: "yake"
          domain_specific: true        # Use aviation dictionary
    
    embedder:
      type: "OllamaEmbedder"
      config:
        model: "nomic-embed-text"
        dimension: 768
        batch_size: 32
    
    vector_store:
      type: "ChromaStore"
      config:
        collection_name: "pilot_reports"
        persist_directory: "./vectordb/aviation/pilot_reports"
    
    retrieval_strategy:
      type: "HybridUniversalStrategy"
      config:
        strategies:
          # Combine similarity with metadata filtering
          - type: "BasicSimilarityStrategy"
            weight: 0.6
            config:
              top_k: 15
          - type: "MetadataFilteredStrategy"  
            weight: 0.4
            config:
              top_k: 15
              filters:
                severity: ["safety_critical", "operational"]
        fusion_method: "weighted"
        final_k: 10

# ============================================================================
# REGULATORY COMPLIANCE STRATEGY
# ============================================================================
aviation_regulatory_compliance:
  description: "Process and search regulatory documents, ADs, SBs, and compliance records"
  use_cases:
    - "AD compliance verification"
    - "Regulatory requirement lookup"
    - "Audit preparation"
    - "Certificate management"
  
  components:
    parser:
      type: "PDFParser"
      config:
        extract_metadata: true        # Regulatory dates are critical
        chunk_size: 768               # Balance between context and precision
        chunk_overlap: 150
        preserve_formatting: true      # Regulatory format matters
    
    extractors:
      # Regulatory reference extraction
      - type: "PatternExtractor"
        config:
          patterns:
            far_reference: "14 CFR \\d{1,3}\\.\\d{1,4}"  # FAR references
            easa_reference: "Part-\\d{2,3}"               # EASA Part references
            ad_reference: "\\d{4}-\\d{2}-\\d{2}"         # AD numbers
            stc_number: "ST\\d{5}[A-Z]{2}"               # STC numbers
          include_context: true
          context_window: 200         # Regulatory context is important
      
      # Date extraction for compliance
      - type: "DateExtractor"         # Custom extractor for compliance dates
        config:
          extract_types:
            - "effective_date"
            - "compliance_due"
            - "inspection_interval"
            - "expiration_date"
          format_patterns:
            - "%Y-%m-%d"
            - "%d %B %Y"
            - "%m/%d/%Y"
      
      # Extract regulatory entities
      - type: "EntityExtractor"
        config:
          entities: ["ORG", "LAW", "DATE"]
          confidence_threshold: 0.8   # High confidence for regulatory
    
    embedder:
      type: "OllamaEmbedder"
      config:
        model: "nomic-embed-text"  
        dimension: 768
        batch_size: 24
    
    vector_store:
      type: "ChromaStore"
      config:
        collection_name: "regulatory_compliance"
        persist_directory: "./vectordb/aviation/regulatory"
        metadata_config:
          indexed_fields: ["ad_number", "effective_date", "aircraft_model"]
    
    retrieval_strategy:
      type: "RerankedStrategy"
      config:
        initial_k: 25
        final_k: 5
        rerank_factors:
          recency_weight: 0.4         # Recent regulations most important
          relevance_weight: 0.4
          metadata_boost:
            document_type:
              "AD": 2.0               # Airworthiness Directives highest priority
              "SB": 1.5               # Service Bulletins
              "FAR": 1.3              # Regulations
              "AC": 1.0               # Advisory Circulars

# ============================================================================
# INCIDENT INVESTIGATION STRATEGY
# ============================================================================
aircraft_incident_investigation:
  description: "Comprehensive analysis of incidents combining all data sources"
  use_cases:
    - "Root cause analysis"
    - "Safety investigation"
    - "Trend correlation across data sources"
    - "Preventive action development"
  
  components:
    parser:
      type: "UniversalParser"         # Handle multiple formats
      config:
        auto_detect: true
        fallback_parser: "TextParser"
        chunk_size: 1024              # Larger for comprehensive context
        chunk_overlap: 300            # High overlap for correlation
    
    extractors:
      # Comprehensive extraction for investigation
      - type: "EntityExtractor"
        config:
          entities: ["PERSON", "ORG", "DATE", "TIME", "LOC"]
          include_context: true
      
      - type: "CausalChainExtractor"  # Custom extractor for cause-effect
        config:
          identify_causes: true
          identify_effects: true
          link_events: true
          temporal_ordering: true
      
      - type: "TimelineExtractor"      # Custom extractor for event sequence
        config:
          extract_timestamps: true
          order_events: true
          identify_gaps: true
      
      - type: "CrossReferenceExtractor" # Links between different documents
        config:
          reference_types:
            - "work_order"
            - "pilot_report"  
            - "maintenance_log"
            - "technical_manual"
    
    embedder:
      type: "OllamaEmbedder"
      config:
        model: "nomic-embed-text"
        dimension: 768
        batch_size: 16               # Smaller batches for complex documents
    
    vector_store:
      type: "ChromaStore"
      config:
        collection_name: "incident_investigation"
        persist_directory: "./vectordb/aviation/incidents"
    
    retrieval_strategy:
      type: "MultiQueryStrategy"      # Generate multiple perspectives
      config:
        num_queries: 5                # Multiple angles of investigation
        query_variations:
          - "technical_cause"
          - "human_factors"
          - "procedural_issues"
          - "similar_incidents"
          - "preventive_measures"
        aggregation: "rrf"            # Combine all perspectives
        top_k_per_query: 10
        final_k: 15                  # More results for thorough investigation