strategies:
  # ==============================================================================
  # RESEARCH PAPERS STRATEGY
  # ==============================================================================
  - name: "research_papers"
    description: "Process academic papers with citation extraction and summarization"
    tags: ["academic", "pdf", "citations"]
    use_cases:
      - "Academic research"
      - "Literature reviews"
      - "Knowledge extraction"
    
    components:
      parser:
        type: "PDFParser"
        config:
          extract_metadata: true
          extract_page_structure: true
          combine_pages: false
          include_page_numbers: true
          extract_outline: true
          min_text_length: 50
      
      extractors:
        - type: "EntityExtractor"
          priority: 90
          config:
            entity_types: ["PERSON", "ORG", "DATE"]
            use_fallback: true
            merge_entities: true
        
        - type: "SummaryExtractor"
          priority: 80
          config:
            summary_sentences: 5
            algorithm: "textrank"
            include_key_phrases: true
        
        - type: "LinkExtractor"
          priority: 70
          config:
            extract_urls: true
            extract_domains: true
            validate_urls: false
      
      embedder:
        type: "HuggingFaceEmbedder"
        config:
          model_name: "sentence-transformers/all-mpnet-base-v2"
          device: "auto"
          batch_size: 32
          normalize_embeddings: true
      
      vector_store:
        type: "ChromaStore"
        config:
          collection_name: "research_papers"
          persist_directory: "./vectordb/research"
          distance_function: "cosine"
      
      retrieval_strategy:
        type: "RerankedStrategy"
        config:
          initial_k: 50
          final_k: 10
          rerank_factors:
            similarity_weight: 0.6
            recency_weight: 0.2
            metadata_weight: 0.2
          normalize_scores: true

  # ==============================================================================
  # LEGAL DOCUMENTS STRATEGY
  # ==============================================================================
  - name: "legal_contracts"
    description: "Process legal documents with PII detection and entity extraction"
    tags: ["legal", "compliance", "pii"]
    use_cases:
      - "Contract analysis"
      - "Compliance checking"
      - "Legal discovery"
    
    components:
      parser:
        type: "PDFParser"
        config:
          extract_metadata: true
          combine_pages: true
          page_separator: "\n\n[PAGE BREAK]\n\n"
          extract_outline: true
          ocr_enabled: true
      
      extractors:
        - type: "PatternExtractor"
          priority: 100
          config:
            predefined_patterns: ["ssn", "phone", "email", "credit_card"]
            custom_patterns:
              - name: "contract_number"
                pattern: "\\b[A-Z]{2,4}-\\d{4,8}-\\d{2}\\b"
                description: "Contract identifier"
              - name: "case_reference"
                pattern: "\\b\\d{4}/[A-Z]{2}/\\d{6}\\b"
                description: "Case reference number"
            case_sensitive: false
        
        - type: "EntityExtractor"
          priority: 90
          config:
            entity_types: ["PERSON", "ORG", "DATE", "MONEY", "GPE"]
            confidence_threshold: 0.8
            merge_entities: true
        
        - type: "DateTimeExtractor"
          priority: 85
          config:
            fuzzy_parsing: true
            extract_relative: true
            extract_durations: true
            date_format: "ISO"
      
      embedder:
        type: "OpenAIEmbedder"
        config:
          api_key: "${OPENAI_API_KEY}"
          model: "text-embedding-3-small"
          batch_size: 100
          max_retries: 3
      
      vector_store:
        type: "PineconeStore"
        config:
          api_key: "${PINECONE_API_KEY}"
          index_name: "legal-docs"
          dimension: 1536
          metric: "cosine"
          namespace: "contracts"
      
      retrieval_strategy:
        type: "MetadataFilteredStrategy"
        config:
          top_k: 20
          filters:
            document_type: ["contract", "agreement"]
          filter_mode: "pre"
          fallback_multiplier: 3

  # ==============================================================================
  # TECHNICAL DOCUMENTATION STRATEGY
  # ==============================================================================
  - name: "tech_docs"
    description: "Process technical documentation with code extraction and API references"
    tags: ["documentation", "code", "api"]
    use_cases:
      - "API documentation"
      - "Code repositories"
      - "Technical manuals"
    
    components:
      parser:
        type: "MarkdownParser"
        config:
          extract_metadata: true
          extract_headings: true
          extract_links: true
          extract_code_blocks: true
          chunk_by_headings: true
          heading_level_split: 2
      
      extractors:
        - type: "HeadingExtractor"
          priority: 95
          config:
            max_level: 4
            include_hierarchy: true
            extract_outline: true
        
        - type: "PathExtractor"
          priority: 85
          config:
            extract_file_paths: true
            extract_urls: true
            extract_s3_paths: true
            normalize_paths: true
        
        - type: "KeywordExtractor"
          priority: 75
          config:
            algorithm: "yake"
            max_keywords: 20
            min_keyword_length: 3
            language: "english"
      
      embedder:
        type: "SentenceTransformerEmbedder"
        config:
          model_name: "all-MiniLM-L6-v2"
          device: "cpu"
          batch_size: 64
          normalize_embeddings: true
          pooling_strategy: "mean"
      
      vector_store:
        type: "FAISSStore"
        config:
          dimension: 384
          index_type: "IVF"
          metric: "Cosine"
          nlist: 100
          nprobe: 10
          use_gpu: false
      
      retrieval_strategy:
        type: "HybridUniversalStrategy"
        config:
          strategies:
            - type: "BasicSimilarityStrategy"
              weight: 0.5
              config:
                top_k: 30
                distance_metric: "cosine"
            
            - type: "MultiQueryStrategy"
              weight: 0.5
              config:
                num_queries: 3
                top_k: 20
                aggregation_method: "weighted"
          
          combination_method: "weighted_average"
          final_k: 15

# ==============================================================================
# STRATEGY TEMPLATES (Predefined configurations)
# ==============================================================================
strategy_templates:
  quick_start:
    name: "quick_start"
    description: "Simple configuration for getting started quickly"
    tags: ["simple", "beginner"]
    use_cases: ["Quick prototyping"]
    
    components:
      parser:
        type: "PlainTextParser"
        config:
          chunk_size: 1000
          chunk_overlap: 200
          split_by: "characters"
      
      embedder:
        type: "OllamaEmbedder"
        config:
          model: "nomic-embed-text"
          base_url: "http://localhost:11434"
          batch_size: 16
      
      vector_store:
        type: "ChromaStore"
        config:
          collection_name: "quickstart"
          persist_directory: "./vectordb/quickstart"
      
      retrieval_strategy:
        type: "BasicSimilarityStrategy"
        config:
          top_k: 10
          distance_metric: "cosine"